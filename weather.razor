@page "/weather"
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Weather Forecast</PageTitle>

<div class="weather-container">
    <h1>Weather Forecast</h1>
    <p>This component demonstrates fetching data from a service.</p>

    <div class="controls">
        <button class="btn btn-primary" @onclick="RefreshData" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm" role="status"></span>
                <text>Loading...</text>
            }
            else
            {
                <text>Refresh</text>
            }
        </button>
        
        <select @bind="selectedCity" @bind:event="onchange" class="form-select">
            <option value="">Select a city</option>
            @foreach (var city in cities)
            {
                <option value="@city">@city</option>
            }
        </select>
    </div>

    @if (forecasts == null || isLoading)
    {
        <div class="loading-state">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading weather data...</p>
        </div>
    }
    else if (forecasts.Length == 0)
    {
        <div class="alert alert-warning">
            <h4>No Data Available</h4>
            <p>Unable to load weather forecast data. Please try again later.</p>
        </div>
    }
    else
    {
        <div class="weather-grid">
            @foreach (var forecast in forecasts)
            {
                <div class="weather-card @GetTemperatureClass(forecast.TemperatureC)">
                    <div class="weather-date">
                        @forecast.Date.ToString("MMM dd, yyyy")
                    </div>
                    <div class="weather-icon">
                        @GetWeatherIcon(forecast.Summary)
                    </div>
                    <div class="weather-temp">
                        <span class="temp-c">@forecast.TemperatureC°C</span>
                        <span class="temp-f">@forecast.TemperatureF°F</span>
                    </div>
                    <div class="weather-summary">
                        @forecast.Summary
                    </div>
                    
                    @if (forecast.Humidity.HasValue)
                    {
                        <div class="weather-humidity">
                            <small>Humidity: @forecast.Humidity%</small>
                        </div>
                    }
                </div>
            }
        </div>
        
        <div class="weather-stats mt-4">
            <h3>Statistics</h3>
            <div class="stats-row">
                <div class="stat-item">
                    <label>Average Temperature:</label>
                    <span>@GetAverageTemperature()°C</span>
                </div>
                <div class="stat-item">
                    <label>Hottest Day:</label>
                    <span>@GetHottestDay()</span>
                </div>
                <div class="stat-item">
                    <label>Coldest Day:</label>
                    <span>@GetColdestDay()</span>
                </div>
            </div>
        </div>
    }
</div>

@* Child components *@
<WeatherChart Data="@chartData" @ref="weatherChart" />

@if (showNotifications)
{
    <NotificationPanel Notifications="@notifications" 
                      OnNotificationDismissed="@HandleNotificationDismissed" />
}

<style>
    .weather-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }
    
    .weather-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }
    
    .weather-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 12px;
        padding: 20px;
        color: white;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        transition: transform 0.2s ease;
    }
    
    .weather-card:hover {
        transform: translateY(-5px);
    }
    
    .weather-card.hot {
        background: linear-gradient(135deg, #ff9a56 0%, #ff6b6b 100%);
    }
    
    .weather-card.cold {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    }
    
    .controls {
        display: flex;
        gap: 15px;
        margin-bottom: 20px;
        align-items: center;
    }
    
    .loading-state {
        text-align: center;
        padding: 40px;
    }
    
    .weather-stats {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        margin-top: 30px;
    }
    
    .stats-row {
        display: flex;
        justify-content: space-around;
        flex-wrap: wrap;
        gap: 20px;
    }
    
    .stat-item {
        text-align: center;
        min-width: 150px;
    }
    
    .stat-item label {
        display: block;
        font-weight: bold;
        margin-bottom: 5px;
    }
</style>

@code {
    private WeatherForecast[]? forecasts;
    private bool isLoading = true;
    private string selectedCity = "";
    private List<string> cities = new() { "London", "New York", "Tokyo", "Sydney", "Paris" };
    private List<ChartDataPoint> chartData = new();
    private List<NotificationItem> notifications = new();
    private bool showNotifications = false;
    private WeatherChart? weatherChart;
    private Timer? refreshTimer;
    private CancellationTokenSource? cancellationTokenSource;

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int? Humidity { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
    
    public class ChartDataPoint
    {
        public string Label { get; set; } = string.Empty;
        public double Value { get; set; }
    }
    
    public class NotificationItem
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Message { get; set; } = string.Empty;
        public NotificationType Type { get; set; }
        public DateTime Timestamp { get; set; } = DateTime.Now;
    }
    
    public enum NotificationType
    {
        Info,
        Warning,
        Error,
        Success
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadWeatherData();
        StartAutoRefresh();
    }

    private async Task LoadWeatherData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            cancellationTokenSource?.Cancel();
            cancellationTokenSource = new CancellationTokenSource();
            
            // Simulate API call with delay
            await Task.Delay(1500, cancellationTokenSource.Token);
            
            forecasts = await GenerateWeatherData();
            UpdateChartData();
            
            await JSRuntime.InvokeVoidAsync("console.log", 
                $"Loaded {forecasts.Length} weather forecasts");
        }
        catch (OperationCanceledException)
        {
            // Handle cancellation
            Console.WriteLine("Weather data loading was cancelled");
        }
        catch (Exception ex)
        {
            await ShowNotification($"Error loading weather data: {ex.Message}", 
                                 NotificationType.Error);
            forecasts = Array.Empty<WeatherForecast>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task<WeatherForecast[]> GenerateWeatherData()
    {
        var summaries = new[]
        {
            "Freezing", "Bracing", "Chilly", "Cool", "Mild",
            "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };

        var random = new Random();
        var baseTemp = selectedCity switch
        {
            "London" => 12,
            "New York" => 15,
            "Tokyo" => 18,
            "Sydney" => 22,
            "Paris" => 14,
            _ => 16
        };

        return Enumerable.Range(1, 10).Select(index =>
        {
            var tempVariation = random.Next(-8, 15);
            var temp = baseTemp + tempVariation;
            
            return new WeatherForecast
            {
                Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
                TemperatureC = temp,
                Summary = summaries[random.Next(summaries.Length)],
                Humidity = random.Next(30, 90)
            };
        }).ToArray();
    }

    private async Task RefreshData()
    {
        await LoadWeatherData();
        await ShowNotification("Weather data refreshed successfully!", 
                             NotificationType.Success);
    }

    private void StartAutoRefresh()
    {
        refreshTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadWeatherData();
                await ShowNotification("Data auto-refreshed", NotificationType.Info);
            });
        }, null, TimeSpan.FromMinutes(5), TimeSpan.FromMinutes(5));
    }

    private async Task ShowNotification(string message, NotificationType type)
    {
        notifications.Add(new NotificationItem 
        { 
            Message = message, 
            Type = type 
        });
        
        showNotifications = true;
        StateHasChanged();
        
        // Auto-hide info notifications after 3 seconds
        if (type == NotificationType.Info)
        {
            await Task.Delay(3000);
            await InvokeAsync(() =>
            {
                notifications.RemoveAll(n => n.Type == NotificationType.Info && 
                                          n.Timestamp < DateTime.Now.AddSeconds(-2));
                StateHasChanged();
            });
        }
    }

    private void HandleNotificationDismissed(string notificationId)
    {
        notifications.RemoveAll(n => n.Id == notificationId);
        if (!notifications.Any())
        {
            showNotifications = false;
        }
        StateHasChanged();
    }

    private void UpdateChartData()
    {
        if (forecasts != null)
        {
            chartData = forecasts.Take(7).Select(f => new ChartDataPoint
            {
                Label = f.Date.ToString("MMM dd"),
                Value = f.TemperatureC
            }).ToList();
        }
    }

    private string GetTemperatureClass(int temperature)
    {
        return temperature switch
        {
            > 25 => "hot",
            < 5 => "cold",
            _ => ""
        };
    }

    private string GetWeatherIcon(string? summary)
    {
        return summary?.ToLower() switch
        {
            var s when s?.Contains("sun") == true => "☀️",
            var s when s?.Contains("rain") == true => "🌧️",
            var s when s?.Contains("cloud") == true => "☁️",
            var s when s?.Contains("snow") == true => "❄️",
            var s when s?.Contains("storm") == true => "⛈️",
            _ => "🌤️"
        };
    }

    private double GetAverageTemperature()
    {
        return forecasts?.Average(f => f.TemperatureC) ?? 0;
    }

    private string GetHottestDay()
    {
        var hottest = forecasts?.OrderByDescending(f => f.TemperatureC).FirstOrDefault();
        return hottest != null ? 
            $"{hottest.Date:MMM dd} ({hottest.TemperatureC}°C)" : 
            "N/A";
    }

    private string GetColdestDay()
    {
        var coldest = forecasts?.OrderBy(f => f.TemperatureC).FirstOrDefault();
        return coldest != null ? 
            $"{coldest.Date:MMM dd} ({coldest.TemperatureC}°C)" : 
            "N/A";
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
    }
}